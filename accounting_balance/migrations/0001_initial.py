# Generated by Django 4.0.6 on 2022-08-04 09:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company_structure', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=20, unique=True, verbose_name='Номер счёта')),
                ('name', models.CharField(max_length=500, unique=True, verbose_name='Название счёта')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания записи')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Дата обновления записи')),
            ],
            options={
                'verbose_name': 'Счёт',
                'verbose_name_plural': 'Счета',
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_code', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='Уникальный код транзакции')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP-address от кого прошла данная транзакция')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=50, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Сумма')),
                ('description', models.CharField(max_length=2000, verbose_name='Описание транзакции')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания записи')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Дата обновления записи')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='company_structure.officebranch', verbose_name='Филиал')),
                ('credit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_transaction', to='accounting_balance.account', verbose_name='На счёт')),
                ('debit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='debit_transaction', to='accounting_balance.account', verbose_name='От счёта')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Транзакция',
                'verbose_name_plural': 'Транзакции',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Balance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=50, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Дебит')),
                ('credit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=50, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Кредит')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания записи')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Дата обновления записи')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounting_balance.account', verbose_name='Номер счёта')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='company_structure.officebranch', verbose_name='Филиал')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Баланс',
                'verbose_name_plural': 'Баланс',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='AccountTransactionTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_template', models.CharField(choices=[('PFTP', 'Оплата за товар продавцу перечислением'), ('AGOP', 'Принятие товара на прочую собственность'), ('RF', 'Признание финансирования'), ('AIAP', 'Начисление % дохода за весь период'), ('AIED', 'Начисление % дохода (наценки) по графику (ежедневно)'), ('RFB', 'Погашение заемщиком финансирования ч/з банк'), ('RFA', 'Погашение ОД с депозитного счёта'), ('RBS', 'Погашение начисленных % с депозитного счёта'), ('AWST', 'Начисление  и удержание налога с продаж (НсП)'), ('PST', 'Оплата налога с продаж (НсП)'), ('ARSPUFA', 'начисление РППУ на остаток ОД'), ('ARSPUBS', 'начисление РППУ на начисленные %')], max_length=20, unique=True, verbose_name='Шаблон транзакции')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания записи')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Дата обновления записи')),
                ('from_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='debit_account', to='accounting_balance.account', verbose_name='Дебит')),
                ('to_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='credit_acount', to='accounting_balance.account', verbose_name='Кредит')),
            ],
            options={
                'verbose_name': 'Шаблон транзакции',
                'verbose_name_plural': 'Шаблоны транзакций',
                'ordering': ['-created_date'],
                'unique_together': {('transaction_template', 'from_account', 'to_account')},
            },
        ),
    ]
